# -*- coding: utf-8 -*-
"""ML Exam 1 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v2BGdwKcvvQLAS1qXTTZYocBgomp5kBX
"""

import pandas as pd

dp=pd.read_csv('/content/bank.csv',delimiter=";")

dp

dp.head()

dp.info()

dp.shape

dp.describe()

dp.columns

dp.dropna()

from sklearn.preprocessing import LabelEncoder
A = LabelEncoder()
dp["job"] = A.fit_transform(d["job"])
dp

from sklearn.datasets import make_classification
from collections import Counter
from sklearn.datasets import make_classification
from imblearn.over_sampling import SMOTE
from matplotlib import pyplot
from numpy import where

x, y = make_classification(n_samples=10000, n_features=2, n_redundant=0,
	n_clusters_per_class=1, weights=[0.99], flip_y=0, random_state=1)

from collections import Counter
counter = Counter(y)
print(counter)

oversample = SMOTE()
x, y = oversample.fit_resample(x, y)
counter = Counter(y)
print(counter)

for label, _ in counter.items():
	row_ix = where(y == label)[0]
	pyplot.scatter(x[row_ix, 0], x[row_ix, 1], label=str(label))
pyplot.legend()
pyplot.show()

t=pd.get_dummies(d)
import numpy as np
h=np.mean(y)/np.std(y)
h

from sklearn.linear_model import LogisticRegression
h=LogisticRegression()
from sklearn.model_selection import train_test_split,GridSearchCV,cross_val_score

x1=d.drop(['y'],axis=1).values
y1=d['y'].values

from sklearn.preprocessing import LabelEncoder
l = LabelEncoder()
#assigning numeric value 
dp['y'] = l.fit_transform(d['y'])
dp

d1=pd.get_dummies(d)
x=d1.drop(['y'],axis=1).values
y=d1['y'].values

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=.20,random_state=0)

from sklearn.linear_model import LogisticRegression
i=LogisticRegression()

i.fit(xtrain,ytrain)
p=i.predict(xtest)
i.predict_proba(xtest)

from sklearn.metrics import accuracy_score,classification_report,confusion_matrix

accuracy_score(ytest,p)

confusion_matrix(ytest,p)

s=classification_report(ytest,p)

print(s)

